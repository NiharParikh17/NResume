plugins {
	id 'java'
	id 'jacoco'
	id 'checkstyle'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.nhparikh'
version = '0.0.1'

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Springframework
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Database
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'

	// Swagger Documentation
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'

	// Mapstruct
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'

	// Tomcat
	implementation 'org.apache.tomcat.embed:tomcat-embed-core'

	// Test libraries
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	reportsDirectory = layout.buildDirectory.dir('jacocoReportDir')
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		csv.required = true
		html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			excludes = ['com.nhparikh.resume.NResumeApplication',
						'com.nhparikh.resume.model.*',
						'com.nhparikh.resume.configuration.*']
			limit {
				minimum = 0.9
			}
		}
	}
}

tasks.register('applicationCodeCoverageReport', JacocoReport) {
	executionData run
	sourceSets sourceSets.main
}

tasks.withType(Checkstyle) {
	configFile = new File(rootDir, 'checkstyle.xml')
}
